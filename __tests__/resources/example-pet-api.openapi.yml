openapi: 3.0.0
info:
  title: Example API
  description: Example CRUD API for pets
  version: 1.0.0
tags:
  - name: pets
    description: Pet operations
paths:
  /pets:
    get:
      operationId: getPets
      summary: List pets
      description: Returns all pets in database
      tags:
        - pets
      responses:
        '200':
          description: List of pets in database
      parameters:
        - name: limit
          in: query
          description: Number of items to return
          required: false
          schema:
            $ref: '#/components/schemas/QueryLimit'
        - name: offset
          in: query
          description: Starting offset for returning items
          required: false
          schema:
            $ref: '#/components/schemas/QueryOffset'
    post:
      operationId: createPet
      summary: Create a pet
      description: Crete a new pet into the database
      tags:
        - pets
      responses:
        '201':
          description: Pet created succesfully
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/PetPayload'
  '/pets/{id}':
    get:
      operationId: getPetById
      summary: Get a pet
      description: Returns a pet by its id in database
      tags:
        - pets
      responses:
        '200':
          description: Pet object corresponding to id
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                type: string
              examples:
                fourOhFour:
                  summary: Example 404 response
                  value: Four Oh Four

      parameters:
        - name: id
          in: path
          description: Unique identifier for pet in database
          required: true
          schema:
            $ref: '#/components/schemas/PetId'
    put:
      operationId: replacePetById
      summary: Replace pet
      description: Replace an existing pet in the database
      tags:
        - pets
      responses:
        '200':
          description: Pet replaced succesfully
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                type: string
              examples:
                fourOhFour:
                  "$ref": "#/paths/~1pets~1%7Bid%7D~1get/responses/404/content/application~1json/examples/fourOhFour"

      parameters:
        - name: id
          in: path
          description: Unique identifier for pet in database
          required: true
          schema:
            $ref: '#/components/schemas/PetId'
      requestBody:
        $ref: '#/components/requestBodies/PetPayload'
    patch:
      operationId: updatePetById
      summary: Update pet
      description: Update an existing pet in the database
      tags:
        - pets
      responses:
        '200':
          description: Pet updated succesfully
        '404':
          description: Pet not found
      parameters:
        - name: id
          in: path
          description: Unique identifier for pet in database
          required: true
          schema:
            $ref: '#/components/schemas/PetId'
      requestBody:
        $ref: '#/components/requestBodies/PetPayload'
    delete:
      operationId: deletePetById
      summary: Delete a pet
      description: Deletes a pet by its id in database
      tags:
        - pets
      responses:
        '200':
          description: Pet deleted succesfully
        '404':
          description: Pet not found
      parameters:
        - name: id
          in: path
          description: Unique identifier for pet in database
          required: true
          schema:
            $ref: '#/components/schemas/PetId'
  '/pets/{id}/human':
    get:
      operationId: getHumanByPetId
      summary: Get a pet's human
      description: Get the human for a pet
      tags:
        - pets
      responses:
        '200':
          description: Human corresponding pet id
        '404':
          description: Human or pet not found
      parameters:
        - name: id
          in: path
          description: Unique identifier for pet in database
          required: true
          schema:
            $ref: '#/components/schemas/PetId'
  /pets/meta:
    get:
      operationId: getPetsMeta
      summary: Get pet metadata
      description: Returns a list of metadata about pets and their relations in the database
      tags:
        - pets
      responses:
        '200':
          description: Metadata for pets
components:
  schemas:
    PetId:
      description: Unique identifier for pet in database
      example: 1
      title: PetId
      type: integer
    PetPayload:
      type: object
      properties:
        name:
          description: Name of the pet
          example: Garfield
          title: PetName
          type: string
      additionalProperties: false
      required:
        - name
    QueryLimit:
      description: Number of items to return
      example: 25
      title: QueryLimit
      type: integer
    QueryOffset:
      description: Starting offset for returning items
      example: 0
      title: QueryOffset
      type: integer
      minimum: 0
  requestBodies:
    PetPayload:
      description: 'Request payload containing a pet object'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PetPayload'
